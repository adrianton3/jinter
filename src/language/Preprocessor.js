// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var getVars, processLiterals, processVars;

  getVars = function(ast) {
    var functionDeclarations, functions, vars;
    vars = new Set;
    functionDeclarations = new Set;
    functions = [];
    estraverse.traverse(ast, {
      enter: function(node, parent) {
        var _ref;
        if ((_ref = node.type) === 'FunctionExpression' || _ref === 'FunctionDeclaration') {
          functions.push(node.body);
          return this.skip();
        }
      },
      leave: function(node, parent) {
        if (node.type === 'VariableDeclarator') {
          vars.add(node.id.name);
        }
        if (node.type === 'FunctionDeclaration') {
          return functionDeclarations.add(node);
        }
      }
    });
    return {
      vars: vars,
      functions: functions,
      functionDeclarations: functionDeclarations
    };
  };

  processVars = function(ast) {
    var functionDeclarations, functions, vars, _ref;
    _ref = getVars(ast), vars = _ref.vars, functions = _ref.functions, functionDeclarations = _ref.functionDeclarations;
    ast.vars = vars;
    ast.functionDeclarations = functionDeclarations;
    functions.forEach(processVars);
  };

  processLiterals = function(ast) {
    return estraverse.traverse(ast, {
      enter: function(node, parent) {
        if (node.type === 'Literal') {
          return node.dataType = typeof node.value;
        }
      }
    });
  };

  if (window.jinter == null) {
    window.jinter = {};
  }

  window.jinter.processVars = processVars;

  window.jinter.processLiterals = processLiterals;

}).call(this);
