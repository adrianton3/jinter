// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var EMPTY, OBJECT;

  EMPTY = jinter.EMPTY;

  OBJECT = function(proto) {
    this.proto = proto;
    this.map = new Map;
    this.extensible = true;
  };

  OBJECT.prototype.type = 'object';

  OBJECT.prototype.typeOf = 'object';

  OBJECT.prototype.get = function(key) {
    if (key === '__proto__') {
      return this.proto;
    } else if (this.map.has(key)) {
      return this.map.get(key);
    } else {
      return this.proto.get(key);
    }
  };

  OBJECT.prototype.put = function(key, value) {
    if (key === '__proto__') {
      this.proto = value;
      return;
    }
    if (!this.extensible && !this.map.has(key)) {
      throw new Error("Object is not extensible");
    }
    return this.map.set(key, value);
  };

  OBJECT.prototype.defineGet = function(key, get) {
    var entry;
    entry = this.map.get(key);
    if (entry != null ? entry.descriptor : void 0) {
      return entry.get = get;
    } else {
      return this.map.set(key, {
        descriptor: true,
        get: get
      });
    }
  };

  OBJECT.prototype.defineSet = function(key, set) {
    var entry;
    entry = this.map.get(key);
    if (entry != null ? entry.descriptor : void 0) {
      return entry.set = set;
    } else {
      return this.map.set(key, {
        descriptor: true,
        set: set
      });
    }
  };

  OBJECT.prototype.seal = function() {
    return this.extensible = false;
  };

  OBJECT.prototype.asNumberRaw = function() {
    var toString, valueOf;
    valueOf = this.get('valueOf');
    if ((valueOf != null ? valueOf.typeOf : void 0) === 'function') {
      return jinter.call(valueOf, this, [], EMPTY);
    }
    toString = this.get('toString');
    if ((toString != null ? toString.typeOf : void 0) === 'function') {
      return jinter.call(toString, this, [], EMPTY);
    }
    throw new Error('Cannot convert object to primitive value');
  };

  OBJECT.prototype.asNumber = function() {
    return this.asNumberRaw().asNumber();
  };

  OBJECT.prototype.asBoolean = function() {
    return true;
  };

  OBJECT.prototype.asStringRaw = function() {
    var toString, valueOf;
    toString = this.get('toString');
    if ((toString != null ? toString.typeOf : void 0) === 'function') {
      return jinter.call(toString, this, [], EMPTY);
    }
    valueOf = this.get('valueOf');
    if ((valueOf != null ? valueOf.typeOf : void 0) === 'function') {
      return jinter.call(valueOf, this, [], EMPTY);
    }
    throw new Error('Cannot convert object to primitive value');
  };

  OBJECT.prototype.asString = function() {
    return this.asStringRaw().asString();
  };

  OBJECT.prototype.asPrimitive = function(prefferedType) {
    return this.defaultValue(prefferedType);
  };

  OBJECT.prototype.defaultValue = function(hint) {
    if ((hint == null) || hint === 'number') {
      return this.asNumberRaw();
    } else {
      return this.asStringRaw();
    }
  };

  if (window.jinter == null) {
    window.jinter = {};
  }

  window.jinter.OBJECT = OBJECT;

}).call(this);
