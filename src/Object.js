// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var OBJECT, call;

  OBJECT = function(proto) {
    this.proto = proto;
    this.map = new Map;
    this.extensible = true;
    this.type = 'object';
  };

  OBJECT.prototype.get = function(key) {
    if (key === '__proto__') {
      return this.proto;
    } else if (this.map.has(key)) {
      return this.map.get(key);
    } else {
      return this.proto.get(key);
    }
  };

  OBJECT.prototype.put = function(key, value) {
    if (key === '__proto__') {
      this.proto = value;
      return;
    }
    if (!this.extensible && !this.map.has(key)) {
      throw new Error("Object is not extensible");
    }
    return this.map.set(key, value);
  };

  OBJECT.prototype.seal = function() {
    return this.extensible = false;
  };

  call = function(closure, thisArgument) {
    var newEnv, returnCandidate;
    newEnv = closure.env.addEntry();
    newEnv.addBinding('this', thisArgument);
    closure.body.vars.forEach(function(name) {
      newEnv.addBinding(name, UNDEFINED);
    });
    closure.body.functionDeclarations.forEach(function(node) {
      var name;
      name = node.id.name;
      closure = jinter.ev(node, newEnv);
      newEnv.addBinding(name, closure);
    });
    returnCandidate = jinter.ev(closure.body, newEnv);
    if (returnCandidate != null ? returnCandidate["return"] : void 0) {
      return returnCandidate.value;
    } else {
      return jinter.UNDEFINED;
    }
  };

  OBJECT.prototype.toNumber = function() {
    var toString, valueOf;
    valueOf = this.get('valueOf');
    if (valueOf != null ? valueOf.isCallable() : void 0) {
      return call(valueOf, this);
    }
    toString = this.get('toString');
    if (toString != null ? toString.isCallable() : void 0) {
      return call(toString, this);
    }
    throw new Error('Cannot convert object to primitive value');
  };

  OBJECT.prototype.toBoolean = function() {
    return true;
  };

  OBJECT.prototype.toString = function() {
    var toString, valueOf;
    toString = this.get('toString');
    if (toString != null ? toString.isCallable() : void 0) {
      return call(toString, this);
    }
    valueOf = this.get('valueOf');
    if (valueOf != null ? valueOf.isCallable() : void 0) {
      return call(valueOf, this);
    }
    throw new Error('Cannot convert object to primitive value');
  };

  OBJECT.prototype.toPrimitive = function(prefferedType) {
    return this.defaultValue(prefferedType);
  };

  OBJECT.prototype.defaultValue = function(hint) {
    if ((hint == null) || hint === 'number') {
      return this.toNumber();
    } else {
      return this.toString();
    }
  };

  OBJECT.prototype.isCallable = function() {
    return false;
  };

  if (window.jinter == null) {
    window.jinter = {};
  }

  window.jinter.OBJECT = OBJECT;

}).call(this);
