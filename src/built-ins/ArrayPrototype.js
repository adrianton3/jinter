// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var ARRAY_FUNCTION, ARRAY_PROTOTYPE, EMPTY, NATIVE_FUNCTION, NULL, NUMBER, OBJECT, STRING, UNDEFINED, filter, forEach, join, map, pop, push, reduce, slice, toString;

  EMPTY = jinter.EMPTY, OBJECT = jinter.OBJECT, NULL = jinter.NULL, UNDEFINED = jinter.UNDEFINED, NUMBER = jinter.NUMBER, STRING = jinter.STRING, NATIVE_FUNCTION = jinter.NATIVE_FUNCTION;

  ARRAY_FUNCTION = new NATIVE_FUNCTION(function() {
    throw new Error('Array function not implemented');
  });

  ARRAY_PROTOTYPE = new OBJECT(NULL);

  ARRAY_FUNCTION.put('prototype', ARRAY_PROTOTYPE);

  slice = new NATIVE_FUNCTION(function(begin, end) {
    var resultRaw;
    resultRaw = arguments.length === 0 ? this.data.slice() : arguments.length === 1 ? this.data.slice(begin.asNumber()) : this.data.slice(begin.asNumber(), end.asNumber());
    return {
      "return": true,
      value: new jinter.ARRAY(resultRaw)
    };
  });

  ARRAY_PROTOTYPE.put('slice', slice);

  push = new NATIVE_FUNCTION(function() {
    var resultRaw;
    resultRaw = Array.prototype.push.apply(this.data, arguments);
    return {
      "return": true,
      value: new NUMBER(resultRaw)
    };
  });

  ARRAY_PROTOTYPE.put('push', push);

  pop = new NATIVE_FUNCTION(function() {
    var result;
    result = this.data.pop();
    return {
      "return": true,
      value: result
    };
  });

  ARRAY_PROTOTYPE.put('pop', pop);

  join = new NATIVE_FUNCTION(function(separator) {
    var separatorString, value;
    separatorString = separator ? separator.asString() : ',';
    value = this.data.map(function(element) {
      if (element === UNDEFINED || element === NULL) {
        return '';
      } else {
        return element.asString();
      }
    }).join(separatorString);
    return {
      "return": true,
      value: new STRING(value)
    };
  });

  ARRAY_PROTOTYPE.put('join', join);

  toString = new NATIVE_FUNCTION(function() {
    var fallback, joinMethod;
    joinMethod = this.get('join');
    if (joinMethod.typeOf === 'function') {
      return jinter.callRaw(joinMethod, this, [new STRING(',')], EMPTY);
    } else {
      fallback = jinter.OBJECT_PROTOTYPE.get('toString');
      return jinter.callRaw(fallback, this, [], EMPTY);
    }
  });

  ARRAY_PROTOTYPE.put('toString', toString);

  ARRAY_PROTOTYPE.put('length', {
    descriptor: true,
    get: new NATIVE_FUNCTION(function() {
      return {
        "return": true,
        value: new NUMBER(this.data.length)
      };
    })
  });

  forEach = new NATIVE_FUNCTION(function(fun, optionalThis) {
    this.data.forEach(function(element, index) {
      var args;
      args = [element, new NUMBER(index), this];
      jinter.callRaw(fun, optionalThis, args, EMPTY);
    }, this);
    return {
      "return": true,
      value: UNDEFINED
    };
  });

  ARRAY_PROTOTYPE.put('forEach', forEach);

  map = new NATIVE_FUNCTION(function(fun, optionalThis) {
    var results;
    results = this.data.map(function(element, index) {
      var args;
      args = [element, new NUMBER(index), this];
      return jinter.call(fun, optionalThis, args, EMPTY);
    }, this);
    return {
      "return": true,
      value: new jinter.ARRAY(results)
    };
  });

  ARRAY_PROTOTYPE.put('map', map);

  filter = new NATIVE_FUNCTION(function(fun, optionalThis) {
    var results;
    results = this.data.filter(function(element, index) {
      var args, result;
      args = [element, new NUMBER(index), this];
      result = jinter.call(fun, optionalThis, args, EMPTY);
      return result.asBoolean();
    }, this);
    return {
      "return": true,
      value: new jinter.ARRAY(results)
    };
  });

  ARRAY_PROTOTYPE.put('filter', filter);

  reduce = new NATIVE_FUNCTION(function(fun, base) {
    var result, step;
    step = function(base, element, index) {
      var args;
      args = [base, element, new NUMBER(index), this];
      return jinter.call(fun, NULL, args, EMPTY);
    };
    result = arguments.length === 1 ? this.data.reduce(step) : this.data.reduce(step, base);
    return {
      "return": true,
      value: result
    };
  });

  ARRAY_PROTOTYPE.put('reduce', reduce);

  if (window.jinter == null) {
    window.jinter = {};
  }

  window.jinter.ARRAY_PROTOTYPE = ARRAY_PROTOTYPE;

  window.jinter.ARRAY_FUNCTION = ARRAY_FUNCTION;

}).call(this);
