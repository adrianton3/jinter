// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var BOOLEAN, EMPTY, MAP_FUNCTION, MAP_PROTOTYPE, NATIVE_FUNCTION, NULL, NUMBER, OBJECT, STRING, UNDEFINED, forEach, get, has, primitiveToValue, set, valueToPrimitive;

  EMPTY = jinter.EMPTY, OBJECT = jinter.OBJECT, NUMBER = jinter.NUMBER, BOOLEAN = jinter.BOOLEAN, STRING = jinter.STRING, NULL = jinter.NULL, UNDEFINED = jinter.UNDEFINED, NATIVE_FUNCTION = jinter.NATIVE_FUNCTION;

  primitiveToValue = function(key) {
    var _ref;
    return (_ref = key.value) != null ? _ref : key;
  };

  valueToPrimitive = function(value) {
    var constructor, valueType;
    valueType = typeof value;
    constructor = valueType === 'number' ? NUMBER : valueType === 'boolean' ? BOOLEAN : valueType === 'string' ? STRING : void 0;
    return new constructor(value);
  };

  MAP_FUNCTION = new NATIVE_FUNCTION(function(pairsRaw) {
    var map, pairs;
    map = pairsRaw != null ? (pairs = pairsRaw.data.map(function(_arg) {
      var key, value, _ref;
      _ref = _arg.data, key = _ref[0], value = _ref[1];
      return [primitiveToValue(key), value];
    }), new jinter.MAP(new Map(pairs))) : new jinter.MAP(new Map);
    return {
      "return": true,
      value: map
    };
  });

  MAP_PROTOTYPE = new OBJECT(NULL);

  MAP_FUNCTION.put('prototype', MAP_PROTOTYPE);

  get = new NATIVE_FUNCTION(function(key) {
    var keyValue, returnValue;
    keyValue = primitiveToValue(key);
    returnValue = this.store.has(keyValue) ? this.store.get(keyValue) : UNDEFINED;
    return {
      "return": true,
      value: returnValue
    };
  });

  MAP_PROTOTYPE.put('get', get);

  has = new NATIVE_FUNCTION(function(key) {
    return {
      "return": true,
      value: new BOOLEAN(this.store.has(primitiveToValue(key)))
    };
  });

  MAP_PROTOTYPE.put('has', has);

  set = new NATIVE_FUNCTION(function(key, value) {
    this.store.set(primitiveToValue(key), value);
    return {
      "return": true,
      value: this
    };
  });

  MAP_PROTOTYPE.put('set', set);

  forEach = new NATIVE_FUNCTION(function(fun, optionalThis) {
    this.store.forEach(function(value, key) {
      var args;
      args = [value, valueToPrimitive(key), this];
      jinter.callRaw(fun, optionalThis, args, EMPTY);
    }, this);
    return {
      "return": true,
      value: UNDEFINED
    };
  });

  MAP_PROTOTYPE.put('forEach', forEach);

  if (window.jinter == null) {
    window.jinter = {};
  }

  window.jinter.MAP_PROTOTYPE = MAP_PROTOTYPE;

  window.jinter.MAP_FUNCTION = MAP_FUNCTION;

}).call(this);
