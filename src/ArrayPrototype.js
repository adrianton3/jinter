// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var ARRAY_PROTOTYPE, EMPTY, NATIVE_FUNCTION, NULL, NUMBER, OBJECT, STRING, UNDEFINED, addMethod, filter, forEach, map, methods, reduce;

  EMPTY = jinter.EMPTY, OBJECT = jinter.OBJECT, NULL = jinter.NULL, UNDEFINED = jinter.UNDEFINED, NUMBER = jinter.NUMBER, STRING = jinter.STRING, NATIVE_FUNCTION = jinter.NATIVE_FUNCTION;

  ARRAY_PROTOTYPE = new OBJECT(NULL);

  addMethod = function(_arg) {
    var name, returnType;
    name = _arg.name, returnType = _arg.returnType;
    return ARRAY_PROTOTYPE.put(name, new NATIVE_FUNCTION(function() {
      var resultRaw;
      resultRaw = Array.prototype[name].apply(this.data, arguments);
      return {
        "return": true,
        value: returnType != null ? new returnType(resultRaw) : resultRaw
      };
    }));
  };

  methods = [
    {
      name: 'toString',
      returnType: STRING
    }, {
      name: 'slice',
      returnType: jinter.ARRAY
    }, {
      name: 'push',
      returnType: NUMBER
    }, {
      name: 'pop'
    }
  ];

  methods.forEach(addMethod);

  ARRAY_PROTOTYPE.put('length', {
    descriptor: true,
    get: new NATIVE_FUNCTION(function() {
      return {
        "return": true,
        value: new NUMBER(this.data.length)
      };
    })
  });

  forEach = new NATIVE_FUNCTION(function(fun, optionalThis) {
    this.data.forEach(function(element, index) {
      var args;
      args = [element, new NUMBER(index), this];
      jinter.callRaw(fun, optionalThis, args, EMPTY);
    }, this);
    return {
      "return": true,
      value: UNDEFINED
    };
  });

  ARRAY_PROTOTYPE.put('forEach', forEach);

  map = new NATIVE_FUNCTION(function(fun, optionalThis) {
    var results;
    results = this.data.map(function(element, index) {
      var args;
      args = [element, new NUMBER(index), this];
      return jinter.call(fun, optionalThis, args, EMPTY);
    }, this);
    return {
      "return": true,
      value: new jinter.ARRAY(results)
    };
  });

  ARRAY_PROTOTYPE.put('map', map);

  filter = new NATIVE_FUNCTION(function(fun, optionalThis) {
    var results;
    results = this.data.filter(function(element, index) {
      var args, result;
      args = [element, new NUMBER(index), this];
      result = jinter.call(fun, optionalThis, args, EMPTY);
      return result.toBoolean();
    }, this);
    return {
      "return": true,
      value: new jinter.ARRAY(results)
    };
  });

  ARRAY_PROTOTYPE.put('filter', filter);

  reduce = new NATIVE_FUNCTION(function(fun, base) {
    var result, step;
    step = function(base, element, index) {
      var args;
      args = [base, element, new NUMBER(index), this];
      return jinter.call(fun, NULL, args, EMPTY);
    };
    result = arguments.length === 1 ? this.data.reduce(step) : this.data.reduce(step, base);
    return {
      "return": true,
      value: result
    };
  });

  ARRAY_PROTOTYPE.put('reduce', reduce);

  if (window.jinter == null) {
    window.jinter = {};
  }

  window.jinter.ARRAY_PROTOTYPE = ARRAY_PROTOTYPE;

}).call(this);
