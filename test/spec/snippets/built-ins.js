// Generated by CoffeeScript 1.8.0
(function() {
  var snippets;

  snippets = {
    'Object.create': {
      'can create an object with a prototype': 'var a = Object.create({ b: 123 });\na.b',
      'can access prototype via __proto__': 'var a = Object.create({ b: 123 });\na.__proto__.b'
    },
    'Object.keys': {
      'returns an empty array for an empty object': 'Object.keys({})',
      'returns the keys of an object': 'Object.keys({ a: 123, b: 321 })'
    },
    'Array': {
      'can construct': 'var a = [11, 22, 33];\na[1]',
      'can set/get numeric property': 'var a = [];\na[3] = 123;\na[3]'
    },
    'Array length': {
      'for empty arrays': '[].length',
      'for non-empty arrays': '[11, 22, 33].length',
      'for sparse arrays': 'var a = [];\na[3] = 123;\na.length'
    },
    'Array methods': {
      'toString': '[11, 22, 33, 44, 55].toString()',
      'slice': '[11, 22, 33, 44, 55].slice(2, 3)',
      'push return': '[11, 22, 33, 44, 55].push(66)',
      'push original array': 'var a = [11, 22, 33, 44, 55];\na.push(66);\na',
      'pop return': '[11, 22, 33, 44, 55].pop()',
      'pop original array': 'var a = [11, 22, 33, 44, 55];\na.pop();\na',
      'forEach iterates over an array': 'var s = 0;\n[11, 22].forEach(function (element) {\n	s = s + element;\n});\ns',
      'forEach indices': 'var s = 0;\n[11, 22].forEach(function (element, index) {\n	s = s + index;\n});\ns',
      'forEach array argument': 'var s = 0;\n[11, 22].forEach(function (element, index, array) {\n	s = s + array[index];\n});\ns',
      'forEach optional this': 'var s = 0;\n[11, 22].forEach(function (element, index, array) {\n	s = s + this;\n}, 123);\ns',
      'map iterates over an array': '[11, 22].map(function (element) {\n	return element * element;\n});',
      'filter eliminates some elements': '[11, 22, 33, 44].filter(function (element) {\n	return element === 22;\n});',
      'filter eliminates all elements when no return is present': '[11, 22, 33, 44].filter(function (element) {\n});',
      'filter preserves all elements': '[11, 22, 33, 44].filter(function (element) {\n	return true;\n});',
      'reduce can sum up numbers': '[11, 22, 33, 44].reduce(function (base, element) {\n	return base + element;\n});',
      'reduce can take an initial value': '[11, 22, 33, 44].reduce(function (base, element) {\n	return base + element;\n}, 123);',
      'reduce is called for all elements when the initial value is present': 'var calls = 0;\n[11, 22, 33, 44].reduce(function (base, element) {\n	calls = calls + 1;\n}, 123);\ncalls',
      'reduce skips the first element when the initial value is missing': 'var calls = 0;\n[11, 22, 33, 44].reduce(function (base, element) {\n	calls = calls + 1;\n});\ncalls'
    },
    'Map': {
      'constructor without arguments': 'var map = new Map;\nmap.get(123)',
      'constructor with arguments': 'var map = new Map([[123, \'asd\'], [321, \'dsa\']]);\nmap.get(123) + map.get(321)'
    },
    'Map methods': {
      'get returns undefined if the entry is missing': 'var map = new Map;\nmap.get(123) === undefined',
      'has returns true': 'var map = new Map;\nmap.has(123)',
      'has returns false': 'var map = new Map([[123, 321]]);\nmap.has(123)',
      'set can set things': 'var map = new Map;\nmap.set(123, "dsa")\nmap.get(123)',
      'set can re-set things': 'var map = new Map([[123, 321]]);\nmap.set(123, "asd")\nmap.get(123)',
      'forEach iterates over entries': 'var s = 0;\nvar map = new Map([["a", 123], ["b", 321]]);\nmap.forEach(function (value) {\n	s = s + value;\n});\ns',
      'forEach keys': 'var s = "";\nvar map = new Map([["a", 123], ["b", 321]]);\nmap.forEach(function (value, key) {\n	s = s + key;\n});\ns'
    },
    'Function methods': {
      'apply': 'var f = function (a, b) { return a + b };\nf.apply(null, [11, 22])',
      'apply with this': 'var f = function (a) { return this + a };\nf.apply(11, [22])',
      'call': 'var f = function (a, b) { return a + b };\nf.call(null, 11, 22)',
      'call with this': 'var f = function (a) { return this + a };\nf.call(11, 22)'
    },
    'isNaN': {
      'number': 'isNaN(123)',
      'NaN': 'isNaN(NaN)',
      'boolean': 'isNaN(false)',
      'string': 'isNaN("asd")',
      'numeric string': 'isNaN("23")',
      'object': 'isNaN({})',
      'null': 'isNaN(null)',
      'undefined': 'isNaN(undefined)'
    },
    'parseFloat': {
      'integer': 'parseFloat(123)',
      'float': 'parseFloat(123.456)',
      'NaN': 'parseFloat(NaN)',
      'boolean': 'parseFloat(false)',
      'string': 'parseFloat("asd")',
      'numeric string': 'parseFloat("23")',
      'object': 'parseFloat({})',
      'null': 'parseFloat(null)',
      'undefined': 'parseFloat(undefined)'
    },
    'parseInt': {
      'integer': 'parseInt(123)',
      'float': 'parseInt(123.456)',
      'NaN': 'parseInt(NaN)',
      'boolean': 'parseInt(false)',
      'string': 'parseInt("asd")',
      'base 10 string': 'parseInt("23")',
      'base 16 string': 'parseInt("FF", 16)',
      'object': 'parseInt({})',
      'null': 'parseInt(null)',
      'undefined': 'parseInt(undefined)'
    },
    'Number': {
      'number': 'Number(123)',
      'NaN': 'Number(NaN)',
      'boolean': 'Number(false)',
      'string': 'Number("asd")',
      'numeric string': 'Number("23")',
      'object': 'Number({})',
      'null': 'Number(null)',
      'undefined': 'Number(undefined)'
    },
    'Boolean': {
      'number': 'Boolean(123)',
      'NaN': 'Boolean(NaN)',
      'boolean': 'Boolean(false)',
      'string': 'Boolean("asd")',
      'numeric string': 'Boolean("23")',
      'object': 'Boolean({})',
      'null': 'Boolean(null)',
      'undefined': 'Boolean(undefined)'
    },
    'String': {
      'number': 'String(123)',
      'NaN': 'String(NaN)',
      'boolean': 'String(false)',
      'string': 'String("asd")',
      'numeric string': 'String("23")',
      'object': 'String({})',
      'null': 'String(null)',
      'undefined': 'String(undefined)'
    }
  };

  if (window.snippets == null) {
    window.snippets = {};
  }

  Object.assign(window.snippets, snippets);

}).call(this);
